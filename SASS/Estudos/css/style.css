@charset "UTF-8";
/* Os Mixins são propriedades encapsuladas que podem ser reaproveitadas, 
e podem receber parâmetros, portanto o uso ideal é quando há variação destes parâmetros */
.default-div-extend, #div2, #div1 {
  border-radius: 110px;
  width: 50%;
  padding: 20px;
  margin: 20px;
  border: 1px solid;
}

#div1 {
  /* O Extend, como o nome sugere, estende as propriedades de outro elemento.
  É elementos cujas propriedades não sofrem alterações, como vários botões que seguem o mesmo
  tamanho. */
  background: #c50909;
  color: #ecd031;
}
#div1:hover {
  background-color: rgba(197, 9, 9, 0.5);
}
@media (max-width: 600px) {
  #div1 {
    font-family: "Times New Roman", Times, serif;
  }
}

#div2 {
  background: #ecd031;
  color: #c50909;
  /* Ampersand (&) permite "grudar" elementos. Dessa forma você pode especificar dentro da herença
  dos elementos */
}
#div2:hover {
  background: #f86f6f;
  color: #ecd031;
  /* É possível fazer Nesting de propriedades também, tratando as propriedades de um elemento
  como se fosse um objeto. Para evitar a repetição do nome do elemento 'font-' */
  font-size: 16px;
  font-family: monospace;
  font-weight: bold;
  font-style: italic;
}
@media (max-width: 600px) {
  #div2 {
    background: #1b1b1b;
    color: #ecd031;
  }
}

.time-lakers {
  background-image: url("../img/lakers.svg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  display: inline-flex;
  width: 300px;
  height: 200px;
}

.time-celtics {
  background-image: url("../img/celtics.svg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  display: inline-flex;
  width: 300px;
  height: 200px;
}

.time-bulls {
  background-image: url("../img/bulls.svg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  display: inline-flex;
  width: 300px;
  height: 200px;
}

/*# sourceMappingURL=style.css.map */
